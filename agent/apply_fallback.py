from pathlib import Path

path = Path('app/services/single_chain_runner.py')
text = path.read_text(encoding='utf-8')

anchor = 'class SlotLLMClient:'
if anchor not in text:
    raise SystemExit('class anchor not found')
loader_anchor = '_ENV_LOADED = False\n\n\ndef _load_env_file() -> None:'
if loader_anchor not in text:
    raise SystemExit('env loader missing (ensure previous edit).')

# Insert fallback function after env loader
fallback_code = "\n\ndef _build_fallback_plan(df: pd.DataFrame) -> Optional[Tuple[Dict[str, Any], Dict[str, Dict[str, str]]]]:\n    required = {\"月份\", \"品类\", \"销量\", \"转化率\"}\n    if not required.issubset(set(df.columns)):\n        return None\n    spec = {\n        'canvas': {'width': 960, 'height': 576, 'dpi': 300, 'aspect': 1.6},\n        'flags': {\n            'inherit_palette': True,\n            'legend_outside': 'auto',\n            'safe_log_y': True,\n            'max_overlays': 4,\n            'tick_density': 'normal',\n        },\n        'layout': {\n            'titles': {\n                'top': '季度对比：销量 vs 转化率',\n                'left': None,\n                'right': None,\n                'bottom': None\n            },\n            'title_align': 'left',\n            'legend': {'loc': 'outside', 'ncol': 2, 'frame': False},\n            'grid': {'x': False, 'y': True, 'minor': False},\n            'panel_labels': [],\n        },\n        'theme': {\n            'font': 'Microsoft YaHei',\n            'fontsize': 11,\n            'axis_linewidth': 1.1,\n            'tick_len': 4.0,\n            'tick_width': 0.9,\n            'palette_global': 'ColorBlindSafe',\n            'line_width': 1.8,\n            'marker_size': 64,\n        },\n        'scales': {\n            'x': {'kind': 'categorical', 'range': None, 'breaks': None},\n            'y_left': {'kind': 'linear', 'range': [0, None], 'breaks': None},\n            'y_right': {'kind': 'linear', 'range': [0, None]},\n        },\n        'overlays': [\n            {\n                'mark': 'bar',\n                'variant': 'grouped',\n                'x': '月份',\n                'y': '销量',\n                'group': '品类',\n                'yaxis': 'left',\n                'style': {'alpha': 0.9, 'width': 0.8},\n            },\n            {\n                'mark': 'scatter',\n                'variant': 'main',\n                'x': '月份',\n                'y': '月均转化率',\n                'group': None,\n                'yaxis': 'right',\n                'style': {'alpha': 0.85, 'size': 72, 'marker': 'D'},\n            },\n        ],\n    }\n    theme_defaults = {\n        'font': 'Microsoft YaHei',\n        'fontsize': 11,\n        'axis_linewidth': 1.1,\n        'palette_global': 'ColorBlindSafe',\n        'tick_len': 4.0,\n        'tick_width': 0.9,\n        'line_width': 1.8,\n        'marker_size': 64,\n    }\n    fallback_slots = {\n        'L1': {\n            'spec.compose': "spec_data = {\n    'canvas': {'width': 960, 'height': 576, 'dpi': 300, 'aspect': 1.6},\n    'flags': {\n        'inherit_palette': True,\n        'legend_outside': 'auto',\n        'safe_log_y': True,\n        'max_overlays': 4,\n        'tick_density': 'normal'\n    },\n    'layout': {\n        'titles': {\n            'top': '季度对比：销量 vs 转化率',\n            'left': None,\n            'right': None,\n            'bottom': None\n        },\n        'title_align': 'left',\n        'legend': {'loc': 'outside', 'ncol': 2, 'frame': False},\n        'grid': {'x': False, 'y': True, 'minor': False},\n        'panel_labels': []\n    },\n    'theme': {\n        'font': 'Microsoft YaHei',\n        'fontsize': 11,\n        'axis_linewidth': 1.1,\n        'tick_len': 4.0,\n        'tick_width': 0.9,\n        'palette_global': 'ColorBlindSafe',\n        'line_width': 1.8,\n        'marker_size': 64\n    },\n    'scales': {\n        'x': {'kind': 'categorical', 'range': None, 'breaks': None},\n        'y_left': {'kind': 'linear', 'range': [0, None], 'breaks': None},\n        'y_right': {'kind': 'linear', 'range': [0, None]}\n    },\n    'overlays': [\n        {\n            'mark': 'bar',\n            'variant': 'grouped',\n            'x': '月份',\n            'y': '销量',\n            'group': '品类',\n            'yaxis': 'left',\n            'style': {'alpha': 0.9, 'width': 0.8}\n        },\n        {\n            'mark': 'scatter',\n            'variant': 'main',\n            'x': '月份',\n            'y': '月均转化率',\n            'group': None,\n            'yaxis': 'right',\n            'style': {'alpha': 0.85, 'size': 72, 'marker': 'D'}\n        }\n    ]\n}\nreturn spec_data",\n            'spec.theme_defaults': "return {\n    'font': 'Microsoft YaHei',\n    'fontsize': 11,\n    'axis_linewidth': 1.1,\n    'palette_global': 'ColorBlindSafe',\n    'tick_len': 4.0,\n    'tick_width': 0.9,\n    'line_width': 1.8,\n    'marker_size': 64\n}"\n        },\n        'L2': {\n            'data.prepare': "df = df[['月份', '品类', '销量', '转化率']].dropna()\n顺序 = sorted(df['月份'].unique())\ndf['月份'] = pd.Categorical(df['月份'], categories=顺序, ordered=True)\ndf = df.sort_values(['月份', '品类']).reset_index(drop=True)\nreturn df",\n            'data.aggregate': "agg = df.groupby(['月份', '品类'], dropna=False).agg({'销量': 'sum', '转化率': 'mean'}).reset_index()\nmonthly = agg.groupby('月份', dropna=False)['转化率'].mean().rename('月均转化率')\nagg = agg.merge(monthly, on='月份', how='left')\nreturn agg",\n            'data.encode': "return df"\n        },\n        'L3': {\n            'marks.bar.grouped': "months = list(df['月份'].unique())\ngroups = list(df['品类'].unique())\nwidth = overlay.get('style', {}).get('width', 0.8) / max(1, len(groups))\nalpha = overlay.get('style', {}).get('alpha', 0.9)\narts = []\nfor idx, grp in enumerate(groups):\n    sub = df[df['品类'] == grp]\n    xs = [i + idx * width for i in range(len(months))]\n    vals = [float(sub[sub['月份'] == m]['销量'].sum()) for m in months]\n    bars = ax.bar(xs, vals, width=width, alpha=alpha, label=str(grp))\n    arts.extend(bars)\nax.set_xticks([i + width * (len(groups) - 1) / 2 for i in range(len(months))])\nax.set_xticklabels(months)\nreturn arts",\n            'marks.scatter.main': "months = list(df['月份'].unique())\npos = {m: i for i, m in enumerate(months)}\nxs = [pos[m] for m in df['月份']]\nys = df['月均转化率']\nstyle = overlay.get('style', {})\nsc = ax.scatter(xs, ys, s=style.get('size', 64), alpha=style.get('alpha', 0.85), marker=style.get('marker', 'D'), color='#d62728', label='月均转化率')\nax.set_xticks(range(len(months)))\nax.set_xticklabels(months)\nreturn [sc]",\n            'scales.y_left.range': "values = df['销量'].astype(float)\nif not values.empty:\n    upper = float(values.max()) * 1.15\n    ax_left.set_ylim(0, upper)",\n            'scales.y_right.range': "if ax_right is not None:\n    values = df['月均转化率'].astype(float)\n    if not values.empty:\n        lower = max(0.0, float(values.min()) * 0.8)\n        upper = float(values.max()) * 1.2\n        ax_right.set_ylim(lower, upper)",\n        },\n        'L4': {\n            'axes.title': "ax_left.set_title('季度对比：销量 vs 转化率', loc='left', fontweight='bold', fontsize=12)\nax_left.set_xlabel('月份', fontsize=10)\nax_left.set_ylabel('销量（单位：元）', fontsize=10)\nif ax_right:\n    ax_right.set_ylabel('转化率', fontsize=10)",\n            'axes.ticks': "ax_left.tick_params(axis='x', labelrotation=0, length=4.0, width=0.9)\nax_left.tick_params(axis='y', length=4.0, width=0.9)\nif ax_right:\n    ax_right.tick_params(length=4.0, width=0.9)",\n            'axes.formatter': "from matplotlib.ticker import PercentFormatter\nif ax_right:\n    ax_right.yaxis.set_major_formatter(PercentFormatter(xmax=1.0))",\n            'legend.apply': "handles, labels = ax_left.get_legend_handles_labels()\nif ax_right:\n    h2, l2 = ax_right.get_legend_handles_labels()\n    handles += h2\n    labels += l2\nif handles:\n    ax_left.legend(handles, labels, loc='center left', bbox_to_anchor=(1.02, 0.5), frameon=False)",\n            'grid.apply': "ax_left.grid(True, axis='y', linestyle='--', alpha=0.3)",\n            'annot.reference_lines': "mean_sales = df.groupby('月份')['销量'].sum().mean()\nif not pd.isna(mean_sales):\n    ax_left.axhline(mean_sales, linestyle='--', linewidth=1.0, color='#444444', alpha=0.6)",\n            'annot.text_boxes': "peak = df.loc[df['销量'].idxmax()]\nax_left.text(pos[peak['月份']], float(peak['销量']) * 1.05, f"高峰: {peak['销量']:.0f}", ha='center', fontsize=9)",\n            'theme.font': "plt.rcParams.update({'font.family': 'Microsoft YaHei', 'font.size': 10})",\n            'theme.axis_linewidth': "for spine in ax_left.spines.values(): spine.set_linewidth(1.1)\nif ax_right:\n    for spine in ax_right.spines.values(): spine.set_linewidth(1.1)",\n        }
    }
    return spec, fallback_slots
'''

if loader_anchor + fallback_code.strip()[:10] in text:
    fallback_str = fallback_code
else:
    fallback_str = fallback_code
text = text.replace(loader_anchor, loader_anchor + fallback_str, 1)

# Insert fallback logic after slots assembled and execution
fallback_marker = '        emit("slots_assembled", {"round": round_idx, "slot_count": len(slots)})\n\n        py_code = assemble_with_slots(slots)\n        out_png = str(run_dir / f"figure_round_{round_idx}.png")\n\n        emit("execution_start", {"round": round_idx, "output": out_png})\n        exec_result = execute_script(py_code, df, base_intent, ctx, out_png)\n        stderr_preview = (exec_result.get("stderr") or "").strip()\n        emit('\n'
if fallback_marker not in text:
    raise SystemExit('fallback insertion point not found')
replacement = "        emit(\"slots_assembled\", {\"round\": round_idx, \"slot_count\": len(slots)})\n\n        py_code = assemble_with_slots(slots)\n        out_png = str(run_dir / f\"figure_round_{round_idx}.png\")\n\n        emit(\"execution_start\", {\"round\": round_idx, \"output\": out_png})\n        exec_result = execute_script(py_code, df, base_intent, ctx, out_png)\n        stderr_preview = (exec_result.get(\"stderr\") or \"\").strip()\n\n        fallback_used = False\n        if not exec_result.get(\"ok\"):\n            fallback_plan = _build_fallback_plan(df)\n            if fallback_plan:\n                emit(\"fallback_applied\", {\"round\": round_idx})\n                fallback_spec, fallback_slots = fallback_plan\n                spec = fallback_spec\n                ctx[\"spec\"] = spec\n                for layer, slot_map in fallback_slots.items():\n                    stage = stage_logs.setdefault(layer, {})\n                    stage['fallback'] = True\n                    stage['raw_slots'] = slot_map\n                    stage['accepted_slots'] = slot_map\n                    stage['rejected_slots'] = {}\n                    notes = stage.get('notes') or ''\n                    stage['notes'] = (notes + "\\n" if notes else '') + 'fallback slots applied'\n                slots = {}\n                for slot_map in fallback_slots.values():\n                    slots.update(slot_map)\n                py_code = assemble_with_slots(slots)\n                exec_result = execute_script(py_code, df, base_intent, ctx, out_png)\n                stderr_preview = (exec_result.get(\"stderr\") or \"\").strip()\n                fallback_used = True\n\n        emit(\"execution_end\", {\"round\": round_idx, \"stderr\": stderr_preview[:200], \"png_path\": exec_result.get(\"png_path\")})\n"
text = text.replace(fallback_marker, replacement, 1)

path.write_text(text, encoding='utf-8')
